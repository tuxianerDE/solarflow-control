[global]
dtu_type = AhoyDTU
smartmeter_type = Smartmeter
latitude = 50.798899
longitude = 7.210922

[solarflow]
sf_device_id = 68aE3bUQ

[mqtt]
mqtt_host = babylon.fritz.box
#mqtt_port = 
mqtt_user = hass
mqtt_pwd = hassPW

#[opendtu]
#base_topic = solar
# your Inverters serial number (OpenDTU Only)
#inverter_serial = 116491132532

# List of indices of the inverter channels (as reported in the DTU) that the Solarflow Hub is connected to
# typically the index starts at 1 as 0 is the output channel of the inverter
# e.g. 1,3 or 3 or [1,3]
#sf_inverter_channels = [3]

[ahoydtu]
base_topic = inverter
# The inverter ID in AhoyDTU: typically 1 for the first inverter
inverter_id = 0
# List of indices of the inverter channels (as reported in the DTU) that the Solarflow Hub is connected to
# typically the index starts at 1 as 0 is the output channel of the inverter
# e.g. 1,3 or 3 or [1,3]
sf_inverter_channels = [3,4]

# the max output power of your inverter, used to calculate correct absolute values
inverter_max_power = 1500

# The name of the inverter in AhoyDTU
inverter_name = HoymilesKeller

[smartmeter]
base_topic = tele/tasmota_7B504C/SENSOR
# if the published value at the base_topic is a JSON type then these accessors are used to get the power values
cur_accessor = MT175.P
total_accessor = MT175.Energy_inz1
#"MT175.Energy_inz1" "MT175.Energy_outz1"

#[poweropti]
#poweropti_user = <PowerFox API user>
#poweropti_password = <Powerfox API password>

#[shelly3em]
#base_topic = 

[control]
battery_low = 2
battery_high = 98
min_charge_level = 350
max_discharge_level = 250
day_discharge_soc = 60
charge_through_threshold = 40
overage_limit = 15                                                      
max_inverter_limit = 750                                          
inverter_mppts = 2
inverter_sf_inputs_used = 2 
fast_change_offset = 200
limit_inverter = true

# window sizes to calculate moving averages of values to avoid overreacting to short spikes/drops
# use average of last X measurements of Solarflow solarinput 
sf_window = 5
# use average of last X measurements of house smartmeter/consumption
sm_window = 5
# use average of last X measurements of inverter output
inv_window = 5
# use average of last X measurements of inverter limit
limit_window = 5

# MQTT telemetry topics specify where solarflow control can read data for it's operation
# all topics must provide integer or float values (no json message format)
[mqtt_telemetry_topics]
# the topic that provides the current household power consumption, read from a smartmeter or equivalent
# you can also provide multiple topics (which will be added up), e.g for Shelly 3-Phase measurement devices
# by separating them with ","
# topic_house = shellies/shellyem3/emeter/1/power, shellies/shellyem3/emeter/2/power, shellies/shellyem3/emeter/3/power
#topic_house = "" solarflow-hub/control/smartmeter"

# topic for the microinverter input to home (e.g. from OpenDTU, AhouyDTU)
topic_acinput = inverter/HoymilesKeller/ch0/P_AC

# topics for panels power which are directly connected to the microinverter (optional)
# typically you would also get this from OpenDTU, AhouDTU or your inverter
# you can provide multiple topics by separating them with ","
# topic_direct_panel = solar/116491132532/1/power, solar/116491132532/2/power
topic_direct_panel = inverter/HoymilesKeller/ch1/P_DC, inverter/HoymilesKeller/ch2/P_DC

# topics for telemetry read from Solarflow Hub
# Note: Solarflow doesn't directly write to these topics when publishing to your local MQTT broker
#       it rather writes to it's predefined topic.
#       Therefor it's recommended to either run the solarflow statuspage or the little topic mapper script to
#       "clean up" the topics and provide them at these locations
# See: https://github.com/reinhard-brandstaedter/solarflow-bt-manager/blob/master/src/solarflow-topic-mapper.py                                        
#topic_solarflow_solarinput = solarflow-hub/telemetry/solarInputPower
#topic_solarflow_electriclevel = solarflow-hub/telemetry/electricLevel
#topic_solarflow_outputpack = solarflow-hub/telemetry/outputPackPower
#topic_solarflow_packinput = solarflow-hub/telemetry/packInputPower
#topic_solarflow_outputhome = solarflow-hub/telemetry/outputHomePower
#topic_solarflow_maxtemp = solarflow-hub/telemetry/batteries/+/maxTemp
#topic_solarflow_battery_soclevel = solarflow-hub/telemetry/batteries/+/socLevel

# topic to steer your microinverter
# for OpenDTU and AhoyDTU please use the command topic that sets the ABSOLUTE limit (in watts) not the RELATIVE limit in percent
topic_limit_non_persistent = inverter/ctrl/limit/0